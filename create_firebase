
if [ ! -f "firebase_cpp_sdk_2.1.3.zip" ]; then
  wget https://dl.google.com/firebase/sdk/cpp/firebase_cpp_sdk_2.1.3.zip
  unzip firebase_cpp_sdk_2.1.3.zip > /dev/null	
fi

groupId=com.github.jomof
version=${TRAVIS_TAG:-0.0.0}
abis=(arm64-v8a armeabi armeabi-v7a x86 x86_64)
runtimes=(c++ gnustl stlport)
libs=(app admob analytics auth database invites messaging remote_config storage)
deploy=${PWD}/.deploy/${groupId}/firebase/${version}

rm -rf .deploy
rm -rf .staging
mkdir -p ${deploy}
mkdir .staging

printf "%s\r\n" "builders: [cmake, cmakeExamples]" > build-examples/cdep.yml
printf "%s\r\n" "dependencies:" >> build-examples/cdep.yml

echo Zipping to ${deploy}/firebase-include.zip
pushd firebase_cpp_sdk > /tmp/nul
zip -r ${deploy}/firebase-include.zip include/ > /tmp/nul
popd > /tmp/nul
headerzipsha=$(shasum -a 256 ${deploy}/firebase-include.zip | awk '{print $1}')
headerzipsize=$(stat --printf="%s" ${deploy}/firebase-include.zip)

for lib in "${libs[@]}"
 do
  manifest="${deploy}/cdep-manifest-${lib}.yml"
  printf "%s\r\n" "coordinate:" > ${manifest}
  printf "%s\r\n" "  groupId: ${groupId}" >> ${manifest}
  printf "%s\r\n" "  artifactId: firebase/${lib}" >> ${manifest}
  printf "%s\r\n" "  version: ${version}" >> ${manifest} 
  if [ ${appcompile} ]; then
    printf "%s\r\n" "dependencies:" >> ${manifest} 
    printf "%s\r\n" "  - compile: ${appcompile}" >> ${manifest} 
    printf "%s\r\n" "    sha256: ${appsha}" >> ${manifest} 
  else
    printf "%s\r\n" "archive:" >> ${manifest} 
    printf "%s\r\n" "  file: firebase-include.zip" >> ${manifest} 
    printf "%s\r\n" "  sha256: ${headerzipsha}" >> ${manifest} 
    printf "%s\r\n" "  size: ${headerzipsize}" >> ${manifest} 
  fi
  printf "%s\r\n" "android:" >> ${manifest} 
  printf "%s\r\n" "  archives:" >> ${manifest} 
   for runtime in "${runtimes[@]}"
   do
     ###
     # ANDROID
     ###
     zip="firebase-android-${lib}-${runtime}.zip"
     zip=${zip/++/pp}

     for abi in "${abis[@]}"
      do
       libSource="firebase_cpp_sdk/libs/android/${abi}/${runtime}/lib${lib}.a"
       libDest=".staging/${zip}/lib/${abi}"
       echo Copying ${libSource} to ${libDest}
       if [ -f ${libSource} ] 
       then
        mkdir -p "${libDest}"
        cp ${libSource} ${libDest}/lib${lib}.a
       else
        echo ${libSource} did not exist. Aborting.
        exit 100
       fi   
      done 

      echo Zipping to ${deploy}/${zip}
      pushd .staging/${zip} > /tmp/nul
      zip -r ${deploy}/${zip} . > /tmp/nul
      popd > /tmp/nul
      shasum=$(shasum -a 256 ${deploy}/${zip} | awk '{print $1}')
      archivesize=$(stat --printf="%s" ${deploy}/${zip})
      printf "%s\r\n" "  - file: ${zip}" >> ${manifest} 
      printf "%s\r\n" "    lib: lib${lib}.a" >> ${manifest} 
      printf "%s\r\n" "    sha256: ${shasum}" >> ${manifest} 
      printf "%s\r\n" "    size: ${archivesize}" >> ${manifest} 
      printf "%s\r\n" "    runtime: ${runtime}" >> ${manifest} 
      printf "%s\r\n" "    platform: 12" >> ${manifest} 
      printf "%s\r\n" "    ndk: r10d" >> ${manifest} 
      printf "%s\r\n" "    abis: [arm64-v8a, armeabi, armeabi-v7a, mips, mips64, x86, x86_64]" >> ${manifest} 
   done

    example_yml=cdep-manifest-${lib}-example.yml
    if [ -f "${example_yml}" ]; then
      cat ${example_yml} >> ${manifest}
    else 
       echo FAILED: ${example_yml} did not exist
       exit 1
    fi

    if [ ! ${appcompile} ]; then
      appcompile="${groupId}:firebase/${lib}:${version}"
      appsha=$(shasum -a 256 ${manifest} | awk '{print $1}')
    fi

    printf "%s\r\n" "- compile: ${manifest}" >> build-examples/cdep.yml
done

# List the files to deploy
find ${deploy}/ -type f | sort


